:orphan:

.. role:: underline
   :class: underline
   
   
Relative path
=============
../fullrmc/Examples/frames/


Description
===========
Refer to `atomicNiTi <fullrmc.Examples.atomicNiTi.html>`__ example.


Files
=====

#. system.pdb: The initial configuration input file.
#. experimental.gr: The x-rays experimental pair distribution function data.
#. experimental.fq: The x-rays experimental reduced structure factor data.
#. run.py: The script file used to run the simulation.
#. plot.py: The script file to plot the last saved engine state of
   :class:`.PairDistributionConstraint` and
   :class:`.ReducedStructureFactorConstraint` constraints data.

run.py explained
================

:underline:`IMPORTING USEFUL DEFINITIONS:` 

All useful packages, modules and definitions are imported. 


:underline:`CREATE ENGINE:` 

Check if engine already saved on disk. In the affirmative load it to continue
fitting from last saved configuration. Otherwise, build the engine and the needed
constraints. In this particular example, 'experimental.fq' has no regular bins. 
Therefore, rebinning it needs to be rebinned using 'fullrmc.Core.Collection.rebin'
function. Even though engine contains :class:`.AtomicCoordinationNumberConstraint`
we decided to discard this constraint upon fitting by using set_used method and 
assigned 'used' flag to False.


:underline:`DIFFERENT RUNS:` 

Define functions to run the fitting engine. All of the following functions finish 
running the engine using Engine.run method.

#. run_normal: Set groups as atoms using set_groups_as_atoms. Here the engine runs 
   traditional RMC with random selection of groups using :class:`.RandomSelector` and 
   random atomic translations using :class:`.TranslationGenerator` move generator.
#. run_swap: Set groups as atoms using set_groups_as_atoms. Create two swapping lists. 
   The first one containing only all Nickel atoms indexes and the second only Titanium 
   atoms indexes. Create two :class:`.SwapPositionsGenerator` for swapping Nickel atoms 
   with Titanium and the other the opposite. Loop over all engine's groups, check
   whether group's atom is Nickel or Titanium and assign it respectively
   :class:`.SwapPositionsGenerator` to Titanium atoms and another 
   :class:`.SwapPositionsGenerator` to Nickel atoms. 
   Advanced users can change :class:`.AtomicCoordinationNumberConstraint` used flag
   to True and try playing with the given coordination number definition and improve
   the fit quality and the physical meaning of the final structure.
      
      
:underline:`RUN no_constraints:` 

Rename default frame '0' to 'no_constraints' then set atomic both coordination number and 
intermolecular distance constraints used flag to False. Then call run_normal and 
run_swap fitting routines.


:underline:`RUN with_vdw:` 

Create new frame 'with_vdw' and set it as used. then set atomic coordination number 
used flag to False and intermolecular distance constraints used flag to True. 
Then call run_normal and run_swap fitting routines.


:underline:`RUN all_constraints:` 

Create new frame 'all_constraints' and set it as used. then set both atomic coordination 
number and intermolecular distance constraints used flag to True. Then call run_normal  
and run_swap fitting routines.


:underline:`PLOT PDF CONSTRAINT:` 

Plotting simultaneously all frames :class:`.PairDistributionConstraint` and
:class:`.ReducedStructureFactorConstraint` data after fitting.

     





















